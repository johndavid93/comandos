sudo docker search -- buscar imagenes en 
sudo docker pull --- descargar una imagen
sudo docker images --- listar imagenes
sudo docker version -- ver version de docker
sudo docker pull imagen:tags --- version determinada de una imagen  
sudo docker run -- Crear contenedores y ejecutar comandos dentro del contenedor 
sudo docker ps ---- para saber que contenedores esta en ejecucion 
sudo docker ps -a --- ver todos los contenedores creados que se estan ejecutando y los que no y la hora de creacion
sudo docker rm nombre del contenedor --- eliminar los contenedores existentes
sudo docker run -i -t nombre del contenedor + bash ---- ejecutar ordenes dentro del container ejemplo sudo docker run -i -t ubuntu bash
--help -- se debe poner despues del comando de eejcucion de docker para que muestre que accion hace ese comando.
exit -- para salir de un contenedor determinado
sudo docker stop + id del contenedor --- detener un contenedor ejemplo: --- sudo docker stop 009607da2f6f
sudo docker run -i -t ubuntu bash---- bandera o parametro -i para que nos deje ingresar contenido en nuestro contenedor y -t para poder tener una terminal en este 
touch nombre del archivo--- crear un archivo dentro de un contenedor 
sudo docker start + id del contenedor --- inicia de nuevo el contenedor -- ejemplo: sudo docker start 009607da2f6f  
sudo docker attach + id del contenedor--- entrar de nuevo al contenedor -- ejemplo: sudo docker attach 009607da2f6f 
sudo docker run --name nombredelcontenedor -it imagen ---- dar un nombre al contenedor --ejemplo sudo docker run --name krathos -it ubuntu
ctrl =pq --- presionando estas teclas podemos salir del contenedor sin detenerlo
apt-get update -- para actualizar los paquetes dentro de un contenedor antes de instalar paquetes dentro del contenedor 
sudo docker commit = id del contenedor = nombrenueva imagen --- crear una imagen a apatir de un contenedor.
gedit --- abre un editor de texto  
sudo docker build -t +nombre de la imagen + /ubicacion/archivo/ = construye una imagen apartir del Dockerfile 
sudo docker run -d -p +nombre de la imagen --- crea un contenedor con un puerto especifico, ejemplo sudo docker -d -p 1000:80 miweb
-------------------------------------------------
			Dockerfile contenido 
FROM: Define una imagen base para crear una nueva imagen
FROM ubuntu:18.04 
MAINTAINER Hace referencia de quien es el creador del archivo
MAINTAINER JOHND
RUN: ejecuta todos los comandos dentro del archivo
RUN apt-get update && apt-get install apache2 
ADD/COPY Permite agregar o copiar archivos desde el equipo local a la imagen
ADD index.html var/www/html
EXPOSE Nos permite xponer por defecto un puerto para el contenedor 
EXPOSE 8080
CMD: Ejecutar accion por defecto al crear el contenedor, es la finalidad 
CMD ["/usr/sbin/apache2", "-D", "FOREGROUND"]


despues ejecutar con el siguiente comando 

docker build -t NOMBRE_CONTENEDOR:VERSION /RUTA_DOCKERFILE/ -----> Ejemplo  docker build -t prue23:1.0 /tmp/pru1/
----------------------------------------------
Pruebas itac
docker commit ID_CONTENEDOR Nombre_imagen ///// para crear una imagen apartir de un contenedor //ejemplo --docker commit 88870d6cb968 prueba
docker inspect ID_CONTENEDOR o imagen /// ver el contenido de este 
docker commit --change = 'CMD ["uwsgi", "--ini", "myproject.ini"]' -c // para cambiar instrucciones en la nueva imagen --chage 'CMD []' --- -c para modificar mas d euna instrucción
docker port ID_CONTENEDOR// lista los puertos que utiliza el contenedor (se tiene que estar dentro). 
do ///Listar todos los contenedores y ver toda la información de este sin omitir nada
docker run -d --name NOMBRE_CONTENEDOR -it ID_IMAGEN O NOMBRE_IMAGEN ///Correr contenedor por medio de una imagen 
docker inspect container_name | grep IPAddress  ///Para ver la IP de un contenedor docker 
 docker run -i -p 22 -p 8000:80 -m /data:/data -t  /bin/bash /// ejemplo para correr imagen con puertos especificos
 docker run -d -p 32858:80 nombre:imagen:1.0.2 // correr con un puerto especifico
sudo chown jenkins:jenkins /ruta_carpeta ///para darle permisos sobre una carpeta
docker run -d --name myjenkins3 -p 8087:8080 -p 50002:50000 cd14cecfdb3a ///ejemplo para crear un contenedor con puertos especificos 
systemctl restart docker // reiniciar docker


